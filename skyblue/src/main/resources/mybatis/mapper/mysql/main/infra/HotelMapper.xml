<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.color.infra.hotel.HotelDao">

	<resultMap type="com.color.infra.hotel.HotelDto" id="resultMapObj"></resultMap>

	<sql id="selectCommon">
		FROM
			hotel c
		LEFT JOIN
			(SELECT
				Hotel_seq,
				roomSeq,
				roomType,
				price,
				status,
				bedType,
				PeopleStay,
				roomDesc,
				ROW_NUMBER() OVER (PARTITION BY hotel_seq ORDER BY price) AS rn
			FROM
				rooms
			) as e
		ON c.hotelSeq = e.Hotel_seq AND e.rn = 1
		LEFT JOIN
			(SELECT
				hotel_seq, MIN(price) AS minPrice
			FROM
				rooms
			GROUP BY hotel_seq
			) as g
		ON c.hotelSeq = g.Hotel_seq
		<if test="shtelDelNy != null and !shtelDelNy.equals('')">AND hotel_delNy = #{shtelDelNy}</if>
		<if test="shtelUseNy != null and !shtelUseNy.equals('')">AND hotel_useNy = #{shtelUseNy}</if>
		<if test="shStars != null and !shStars.equals('')">AND stars = #{shStars}</if>
		<choose>
			<when test="shOptionDate == 1">AND c.hotelRgDate BETWEEN #{shDateStart} AND #{shDateEnd}</when>
			<when test="shOptionDate == 2">AND c.hotelEditDate BETWEEN #{shDateStart} AND #{shDateEnd}</when>
		</choose>
		<if test="shSwimmingPoolNy != null and !shSwimmingPoolNy.equals('')">AND swimmingPoolNy = #{shSwimmingPoolNy}</if>
		<if test="shFitnessCenterNy != null and !shFitnessCenterNy.equals('')">AND fitnessCenterNy = #{shFitnessCenterNy}</if>
		<if test="shRoomServiceNy != null and !shRoomServiceNy.equals('')">AND roomServiceNy = #{shRoomServiceNy}</if>
		<if test="shSpaNy != null and !shSpaNy.equals('')">AND spaNy = #{shSpaNy}</if>
		<if test="shWifiNy != null and !shWifiNy.equals('')">AND wifiNy = #{shWifiNy}</if>
		<if test="shParkingNy != null and !shParkingNy.equals('')">AND parkingNy = #{shParkingNy}</if>
		<if test="shHvacNy != null and !shHvacNy.equals('')">AND hvacNy = #{shHvacNy}</if>
		<if test="shSmokingAreaNy != null and !shSmokingAreaNy.equals('')">AND smokingAreaNy = #{shSmokingAreaNy}</if>
		<choose>
			<when test="shOption == 1">AND hotelSeq = #{shValue}</when>
			<when test="shOption == 2">AND hotelName LIKE CONCAT('%',#{shValue},'%')</when>
			<when test="shOption == 3">AND hotelZipCode LIKE CONCAT('%',#{shValue},'%')</when>
			<when test="shOption == 4">AND hotelAddress1 LIKE CONCAT('%',#{shValue},'%')</when>
			<when test="shOption == 5">AND hotelAddress2 LIKE CONCAT('%',#{shValue},'%')</when>
		</choose>
	</sql>
	
	<!-- 호텔리스트 -->
	<select id="hotelList" resultMap="resultMapObj">
		select aa.* from (
		SELECT
			c.hotelSeq,
		    c.hotelName,
		    c.hotelZipCode,
		    c.hotelAddress1,
		    c.hotelAddress2,
		    c.site,
		    c.stars,
		    c.swimmingPoolNy,
		    c.fitnessCenterNy,
		    c.roomServiceNy,
		    c.spaNy,
		    c.wifiNy,
		    c.parkingNy,
		    c.hvacNy,
		    c.smokingAreaNy,
		    c.petsNy,
		    c.hotel_delNy,
		    c.hotel_useNy,
		    c.hotelDesc,
		    c.hotelRgDate,
		    c.hotelEditDate,
		    e.roomType,
    		e.price,
    		e.status,
    		e.bedType,
    		e.PeopleStay,
    		e.Hotel_seq,
    		g.g.minPrice
			<include refid="selectCommon"/>
<!-- 		WHERE 1=1 -->
<!-- 			AND c.hotelSeq = #{hotelSeq} -->
		ORDER BY
			c.hotelSeq DESC
		) aa
		limit #{rowNumToShow} offset #{startRnumForMysql}
	</select>
	
	<select id="selectOneCount" resultType="Integer">
		SELECT COUNT(*)
		<include refid="selectCommon"/>
	</select>
	
	<!-- 호텔 상세리스트 -->
	<select id="HotelDeList" resultMap="resultMapObj">
		SELECT
			c.hotelSeq,
		    c.hotelName,
		    c.hotelZipCode,
		    c.hotelAddress1,
		    c.hotelAddress2,
		    c.site,
		    c.stars,
		    c.swimmingPoolNy,
		    c.fitnessCenterNy,
		    c.roomServiceNy,
		    c.spaNy,
		    c.wifiNy,
		    c.parkingNy,
		    c.hvacNy,
		    c.smokingAreaNy,
		    c.petsNy,
		    c.hotel_delNy,
		    c.hotel_useNy,
		    c.hotelDesc,
		    c.hotelRgDate,
		    c.hotelEditDate,
		    e.roomSeq,
		    e.roomType,
    		e.price,
    		e.status,
    		e.bedType,
    		e.PeopleStay,
    		e.Hotel_seq
		FROM
			hotel c
		LEFT JOIN rooms e
			ON e.Hotel_seq = c.hotelSeq
		WHERE 1=1
			AND c.hotelSeq = #{hotelSeq}
		ORDER BY
			e.price asc
	</select>
	
	<insert id="hotelInsert">
		INSERT INTO hotel (
		    hotelName,
		    hotelZipCode,
    		hotelAddress1,
    		hotelAddress2,
		    site,
		    stars,
		    swimmingPoolNy,
		    fitnessCenterNy,
		    roomServiceNy,
		    spaNy,
		    wifiNy,
		    parkingNy,
		    hvacNy,
		    smokingAreaNy,
		    petsNy,
		    hotel_delNy,
		    hotel_useNy,
		    hotelDesc,
		    hotelRgDate,
		    hotelEditDate
		)
		VALUES (
			#{hotelName},
		    #{hotelZipCode},
		    #{hotelAddress1},
		    #{hotelAddress2},
		    #{site},
		    #{stars},
		    #{swimmingPoolNy},
		    #{fitnessCenterNy},
		    #{roomServiceNy},
		    #{spaNy},
		    #{wifiNy},
		    #{parkingNy},
		    #{hvacNy},
		    #{smokingAreaNy},
		    #{petsNy},
		    0,
		    #{hotel_useNy},
		    #{hotelDesc},
		    now(),
		    now()
		)
		<selectKey resultType="String" keyProperty="hotelSeq" order="AFTER">
			SELECT last_insert_id()
		</selectKey>
	</insert>
	
	<select id="selectOne" resultMap="resultMapObj">
		SELECT
			c.hotelSeq,
		    c.hotelName,
		    c.hotelZipCode,
		    c.hotelAddress1,
		    c.hotelAddress2,
		    c.site,
		    c.stars,
		    c.swimmingPoolNy,
		    c.fitnessCenterNy,
		    c.roomServiceNy,
		    c.spaNy,
		    c.wifiNy,
		    c.parkingNy,
		    c.hvacNy,
		    c.smokingAreaNy,
		    c.petsNy,
		    c.hotel_delNy,
		    c.hotel_useNy,
		    c.hotelDesc,
		    c.hotelRgDate,
		    c.hotelEditDate,
		    e.roomType,
    		e.price,
    		e.status,
    		e.bedType,
    		e.PeopleStay,
    		e.Hotel_seq,
    		g.minPrice
    	FROM
			hotel c
		LEFT JOIN
			(SELECT
				Hotel_seq,
				roomSeq,
				roomType,
				price,
				status,
				bedType,
				PeopleStay,
				roomDesc,
				ROW_NUMBER() OVER (PARTITION BY hotel_seq ORDER BY price) AS rn
			FROM
				rooms
			) as e
		ON c.hotelSeq = e.Hotel_seq AND e.rn = 1
		LEFT JOIN
			(SELECT
				hotel_seq, MIN(price) AS minPrice
			FROM
				rooms
			GROUP BY hotel_seq
			) as g
		ON c.hotelSeq = g.Hotel_seq
		WHERE 1=1
			AND c.hotelSeq = #{hotelSeq}
	</select>
	
	<update id="hotelUpdate">
		UPDATE hotel
		SET
			hotelName = #{hotelName},
		    hotelZipCode = #{hotelZipCode},
		    hotelAddress1 = #{hotelAddress1},
		    hotelAddress2 = #{hotelAddress2},
		    site = #{site},
		    stars = #{stars},
		    swimmingPoolNy = #{swimmingPoolNy},
		    fitnessCenterNy = #{fitnessCenterNy},
		    roomServiceNy = #{roomServiceNy},
		    spaNy = #{spaNy},
		    wifiNy = #{wifiNy},
		    parkingNy = #{parkingNy},
		    hvacNy = #{hvacNy},
		    smokingAreaNy = #{smokingAreaNy},
		    petsNy = #{petsNy},
		    hotel_delNy = #{hotel_delNy},
		    hotel_useNy = #{hotel_useNy},
		    hotelDesc = #{hotelDesc},
    		hotelEditDate = now()
    	WHERE 1=1
    		AND hotelSeq = #{hotelSeq}
	</update>
	
	<update id="hotelUelete">
		UPDATE hotel
		SET
			hotel_delNy = 1
		WHERE 1=1
			AND hotelSeq = #{hotelSeq}
	</update>
	
	<delete id="hotelDelete">
		DELETE FROM hotel
		WHERE 1=1
			AND hotelSeq = #{hotelSeq}
	</delete>
	
	<!-- reviews -->
	<select id="ReviewSelectList" resultMap="resultMapObj">
		SELECT
			c.hotelSeq,
			c.hotelName,
		    d.customerName,
		    f.reStars,
		    f.reTitle,
		    f.reDesc,
		    f.reDelNy,
		    f.reRegDate,
		    f.reEditDate,
		    f.Customer_seq,
		    f.Hotel_seq
		FROM reviews f
		LEFT JOIN hotel c
			ON f.Hotel_seq = c.hotelSeq
		LEFT JOIN customer d
			ON f.Customer_seq = d.customerSeq
	</select>
	
	<!-- hotelDetail에서 booking, rooms insert -->
	<!-- bookingSeq 값을 booking에 삽입한 후 bookingroom에 전달하려면, MyBatis에서는 useGeneratedKeys를 설정하여 자동 생성된 bookingSeq 값을 가져올 수 있다. -->
	<insert id="bookingInsert" useGeneratedKeys="true" keyProperty="bookingSeq">
		INSERT INTO booking (
			checkInDate, 
			checkOutDate, 
			bkPayment, 
			totalPrice, 
			paymentDate, 
			bkDesc, 
			bkRegDate, 
			bkEditDate,
			bkDelNy, 
			Customer_seq
		) VALUES (
			#{checkInDate}, 
			#{checkOutDate}, 
			null, 
			#{totalPrice},
			null, 
			#{bkDesc},
			now(), 
			now(), 
			0, 
			#{Customer_seq}
		)
	</insert>
	<insert id="roomBookingInsert" parameterType="map">
		<!-- 선택된 메뉴들의 roomSeq값이 room_Seqs 리스트로 전달되어 roomBookingInsert에서 각각의 room_Seq를 사용하여 bookingroom테이블에 데이터를 삽입할 수 있다. -->
		INSERT INTO bookingroom (
			brUseNy,
			brDelNy,
			rooms_roomSeq,
			booking_bookingSeq
		) VALUES 
		<foreach collection="room_Seqs" item="room_Seq" separator=",">
		(
			1,
			0,
			#{room_Seq},
			#{bookingSeq}
		)
		</foreach>
	</insert>
	
	<!-- booking 페이지에 booking테이블 정보 출력 -->
	<select id="bookingSelectOne" resultMap="resultMapObj" parameterType="String" resultType="map">
		SELECT
			i.bookingSeq,
		    d.customerSeq,
		    d.customerName,
		    d.birthDate,
		    d.phoneNumber,
		    d.email,
		    i.bkDesc,
		    i.checkInDate,
		    i.checkOutDate,
		    i.totalPrice
		FROM booking AS i
			LEFT JOIN customer AS d
				ON i.Customer_seq = d.customerSeq
		WHERE 1 = 1
			AND i.bookingSeq = #{bookingSeq}
	</select>
	
	<!-- booking 페이지에 bookingroom테이블 정보 출력 -->
	<select id="bookingRoomSelectList" resultMap="resultMapObj" parameterType="String" resultType="map">
		SELECT
			e.roomType,
		    e.price
		FROM bookingroom AS h
			LEFT JOIN rooms AS e
				ON h.rooms_roomSeq = e.roomSeq
			LEFT JOIN booking AS i
				ON h.booking_bookingSeq = i.bookingSeq
		WHERE 1 = 1
			AND bookingSeq = #{bookingSeq}
	</select>
	
	<!-- booking 페이지에 hotel테이블 정보 출력 -->
	<!-- DISTINCT를 이용하여 쿼리가 특정칼럼들만 중복되지 않도록 보장하면서 중복을 제거한다. -->
	<select id="bookingHotelSelectOne" resultMap="resultMapObj" parameterType="String" resultType="map">
		SELECT DISTINCT
			c.hotelName,
		    c.hotelAddress1
		FROM bookingroom AS h
			LEFT JOIN rooms AS e
				ON h.booking_bookingSeq = e.roomSeq
			LEFT JOIN hotel AS c
				ON e.Hotel_seq = c.hotelSeq
			LEFT JOIN booking AS i
				ON h.booking_bookingSeq = i.bookingSeq
		WHERE 1 = 1
			AND bookingSeq = #{bookingSeq}
	</select>
	
	<!-- MyPage 페이지에 예약내역 테이블 정보 출력 -->
	<select id="myPageBkSelectList" resultMap="resultMapObj" resultType="map">
		select cc.* from (
			SELECT DISTINCT
				c.hotelName,
				c.hotelAddress1,
				c.hotelAddress2,
				i.bookingSeq,
				i.checkInDate,
				i.checkOutDate,
				i.totalPrice,
				i.bkPayment,
				i.paymentDate,
			    i.bkDesc
			    <include refid="bkSelectCommon"/>
		ORDER BY
			i.bookingSeq ASC
			) cc
		limit #{rowNumToShow} offset #{startRnumForMysql}
	</select>
	
	<select id="bkSelectOneCount" resultType="Integer">
		SELECT COUNT(*)
		<include refid="bkSelectCommon"/>
	</select>
	
	<sql id="bkSelectCommon">		    
		FROM bookingroom AS h
			LEFT JOIN rooms AS e
				ON h.booking_bookingSeq = e.roomSeq
			LEFT JOIN hotel AS c
				ON e.Hotel_seq = c.hotelSeq
			LEFT JOIN booking AS i
				ON h.booking_bookingSeq = i.bookingSeq
			LEFT JOIN customer AS d
				ON i.Customer_seq = d.customerSeq
		WHERE 1 = 1
			AND d.customerSeq = #{customerSeq}
			AND i.bkPayment IS NOT NULL
			AND i.paymentDate IS NOT NULL
	</sql>
	
	<!-- 결제하면 결제방식이랑 결제일 업데이트되어야함 -->
	<update id="bookingUpdate">
	    UPDATE booking
	    SET
	        bkPayment = #{bkPayment},
	        paymentDate = now()
	    WHERE 1 = 1
	        AND bookingSeq = #{bookingSeq}
	</update>
	
	<!-- upload files -->
	<insert id="insertUploaded">
		INSERT INTO CustomerUploaded (
			upType,
		    upDefaultNy,
		    upSort,
		    upPath,
		    upOriginalName,
		    upUuidName,
		    upExt,
		    upSize,
		    upDelNy,
		    upCusSeq,
		    upRegIp,
		    upRegSeq,
		    upRegDeviceCd,
		    upRegDateTime,
		    upRegDateTimeSvr
		) VALUES (
			#{upType},
		    #{upDefaultNy},
		    #{upSort},
		    #{upPath},
		    #{upOriginalName},
		    #{upUuidName},
		    #{upExt},
		    #{upSize},
		    0,
		    7,
		    #{upRegIp},
		    #{upRegSeq},
		    #{upRegDeviceCd},
		    #{upRegDateTime},
		    #{upRegDateTimeSvr}
		)
	</insert>
	
</mapper>